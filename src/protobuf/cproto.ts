/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: cproto.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum ID {
    NONE = 0,
    SHUTDOWN = 1,
    GET_VERSION = 2,
    LOAD_PACKS = 3,
    LOAD_SOLUTION = 4,
    LIST_COMPONENTS = 5
}
export class RequestEnvelope extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: ID;
        payload?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, ID.NONE) as ID;
    }
    set id(value: ID) {
        pb_1.Message.setField(this, 1, value);
    }
    get payload() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set payload(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: ID;
        payload?: Uint8Array;
    }): RequestEnvelope {
        const message = new RequestEnvelope({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.payload != null) {
            message.payload = data.payload;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: ID;
            payload?: Uint8Array;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.payload != null) {
            data.payload = this.payload;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != ID.NONE)
            writer.writeEnum(1, this.id);
        if (this.payload.length)
            writer.writeBytes(2, this.payload);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestEnvelope {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestEnvelope();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readEnum();
                    break;
                case 2:
                    message.payload = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestEnvelope {
        return RequestEnvelope.deserialize(bytes);
    }
}
export class ResponseEnvelope extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: ID;
        status?: boolean;
        payload?: Uint8Array;
        error?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, ID.NONE) as ID;
    }
    set id(value: ID) {
        pb_1.Message.setField(this, 1, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set status(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get payload() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set payload(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get error() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set error(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: ID;
        status?: boolean;
        payload?: Uint8Array;
        error?: string;
    }): ResponseEnvelope {
        const message = new ResponseEnvelope({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.payload != null) {
            message.payload = data.payload;
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: ID;
            status?: boolean;
            payload?: Uint8Array;
            error?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.payload != null) {
            data.payload = this.payload;
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != ID.NONE)
            writer.writeEnum(1, this.id);
        if (this.status != false)
            writer.writeBool(3, this.status);
        if (this.payload.length)
            writer.writeBytes(2, this.payload);
        if (this.error.length)
            writer.writeString(4, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseEnvelope {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseEnvelope();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readEnum();
                    break;
                case 3:
                    message.status = reader.readBool();
                    break;
                case 2:
                    message.payload = reader.readBytes();
                    break;
                case 4:
                    message.error = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResponseEnvelope {
        return ResponseEnvelope.deserialize(bytes);
    }
}
export class GetVersionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        version?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
        }
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set version(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        version?: string;
    }): GetVersionResponse {
        const message = new GetVersionResponse({});
        if (data.version != null) {
            message.version = data.version;
        }
        return message;
    }
    toObject() {
        const data: {
            version?: string;
        } = {};
        if (this.version != null) {
            data.version = this.version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.version.length)
            writer.writeString(1, this.version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.version = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetVersionResponse {
        return GetVersionResponse.deserialize(bytes);
    }
}
export class LoadSolutionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        solution?: string;
        context?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("solution" in data && data.solution != undefined) {
                this.solution = data.solution;
            }
            if ("context" in data && data.context != undefined) {
                this.context = data.context;
            }
        }
    }
    get solution() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set solution(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get context() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set context(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        solution?: string;
        context?: string[];
    }): LoadSolutionRequest {
        const message = new LoadSolutionRequest({});
        if (data.solution != null) {
            message.solution = data.solution;
        }
        if (data.context != null) {
            message.context = data.context;
        }
        return message;
    }
    toObject() {
        const data: {
            solution?: string;
            context?: string[];
        } = {};
        if (this.solution != null) {
            data.solution = this.solution;
        }
        if (this.context != null) {
            data.context = this.context;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.solution.length)
            writer.writeString(1, this.solution);
        if (this.context.length)
            writer.writeRepeatedString(2, this.context);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadSolutionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadSolutionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.solution = reader.readString();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoadSolutionRequest {
        return LoadSolutionRequest.deserialize(bytes);
    }
}
export class ListComponentsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        component?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
        }
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set component(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        component?: string[];
    }): ListComponentsResponse {
        const message = new ListComponentsResponse({});
        if (data.component != null) {
            message.component = data.component;
        }
        return message;
    }
    toObject() {
        const data: {
            component?: string[];
        } = {};
        if (this.component != null) {
            data.component = this.component;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.component.length)
            writer.writeRepeatedString(1, this.component);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListComponentsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListComponentsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListComponentsResponse {
        return ListComponentsResponse.deserialize(bytes);
    }
}
